{"version":3,"sources":["store/actions/types.js","store/reducers/auth.reducer.js","store/reducers/user.reducer.js","store/reducers/validation.reducer.js","store/reducers/category.reducer.js","store/reducers/posts.reducer.js","store/reducers/post.reducer.js","store/reducers/comment.reducer.js","store/reducers/root.reducer.js","store/store.js","axios.js","store/actions/auth.action.js","store/actions/user.action.js","store/actions/validation.action.js","store/actions/category.action.js","store/actions/posts.action.js","store/actions/post.action.js","store/actions/comment.action.js","containers/header/Header.js","containers/category/Category.js","components/preloader/PreLoader.js","containers/category/Categories.js","components/postTemplate/PostTemplate.js","utils/stringToColor.js","containers/post/Posts.js","components/main/MainPage.js","utils/validation.utils.js","containers/auth/LoginPage.js","containers/auth/RegisterPage.js","containers/comment/Comment.js","containers/post/CurrentPost.js","containers/profile/ProfileForm.js","containers/profile/ProfilePage.js","containers/author/AuthorPage.js","App.js","serviceWorker.js","index.js","config.js"],"names":["LOGOUT","initialState","token","loading","loaded","error","user","id","login","password","isLogined","isNameInputValid","isPasswordInputValid","isCommentInputValid","isCategoryInputValid","isTitleInputValid","isBodyInputValid","categories","category","posts","post","title","body","author_id","author_name","category_id","category_name","comments","combineReducers","auth","state","arguments","length","undefined","action","type","Object","objectSpread","currentUser","validation","flag","allPosts","currentPost","middleware","thunk","enhancer","compose","applyMiddleware","apply","window","store","createStore","rootReducer","axiosInstance","axios","create","baseURL","headers","localStorage","getItem","Authorization","concat","logout","dispatch","removeItem","defaults","common","getUserByToken","get","then","response","data","catch","err","setNameInputValid","setPasswordInputValid","getAllCategories","getAllPostsByAuthorId","deletePosts","postId","authorId","delete","getPostById","getCommentsByPostId","Header","onHandleLogout","onLogout","_this","props","_this2","this","_this$props","classes","isAutenticated","userId","react_default","a","createElement","Link","className","link","to","Button_default","color","onClick","root","AppBar_default","position","Toolbar_default","IconButton_default","menuButton","aria-label","Menu_default","index_es","variant","grow","showNavBar","React","Component","mapDispatchToProps","connect","withStyles","flexGrow","marginLeft","marginRight","textDecoration","Category","_ref","selected","ListItem_default","button","ListItemText_default","primary","theme","progress","margin","spacing","unit","CircularProgress_default","size","Categories","selectedIndex","handleSelectedCategory","index","setState","onGetAllPostsByCategory","handlePreloader","PreLoader","onGetAllCategories","List_default","component","map","category_Category","key","description","name","width","maxWidth","backgroundColor","palette","background","paper","card","actions","display","avatar","handleSelectedPost","handleAuthorPosts","handleDeletePost","handleColor","authorAvatar","authorColor","authorName","categoryName","Card_default","CardHeader_default","Avatar_default","style","MoreVert_default","subheader","CardContent_default","ListItemAvatar_default","Chat_default","ListItemSecondaryAction_default","Delete_default","stringToColour","str","hash","i","charCodeAt","colour","toString","substr","Posts","string","stringToColor","handleAuthorAvatar","charAt","toUpperCase","history","push","onDeletePosts","onGetAllPosts","expanded","postTemplate_PostTemplate","categoryId","handleExpandClick","handleUpdatePost","onGetPostById","onUpdatePosts","updateData","put","nested","paddingLeft","withRouter","container","gridTemplateColumns","gridGap","padding","textAlign","text","secondary","whiteSpace","marginBottom","Grid_default","item","xs","Paper_default","category_Categories","post_Posts","checkValidity","value","isValid","trim","LoginUserComponent","_Component","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","touchedName","touchedPassword","handleChangeName","e","onSetNameInputValid","target","handleChangePassword","onSetPasswordInputValid","submitHandler","preventDefault","handleLogin","_this$state","inherits","createClass","nameFieldValid","passwordFieldValid","_this$state2","noValidate","autoComplete","onSubmit","TextField_default","label","textField","onChange","disabled","loginData","setItem","LoginPage","typography","useNextVariants","flexDirection","flexWrap","auto","dense","marginTop","menu","RegisterUserComponent","tryRegistration","authData","RegisterPage","leftIcon","rightIcon","iconSmall","fontSize","Comments","comment","touchedComment","handleChangeComment","onSetCommentInputValid","onCreateComment","_this$props2","commentFieldValid","multiline","rows","placeholder","commentData","post_id","CurrentPost","handleDeleteComment","commentId","match","onDeleteComment","params","onGetCommentsByPostId","_this$props3","Typography_default","CardActions_default","disableActionSpacing","Favorite_default","Share_default","classnames","expand","defineProperty","expandOpen","aria-expanded","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","paragraph","Comment","transform","transition","transitions","duration","shortest","breakpoints","up","red","ProfileForm","touchedCategory","touchedTitle","touchedBody","handleChangeCategory","onSetCategoryInputValid","handleChangeTitle","onSetTitleInputValid","handleChangeBody","onSetBodyInputValid","onCreatePosts","categoryInputValid","titleInputValid","bodyInputValid","select","SelectProps","MenuProps","helperText","MenuItem_default","onGetSingleCategoryById","console","log","postData","ProfilePage","handlerDeletePost","onGetAllPostsByAuthorId","userPosts","profile_ProfileForm","AuthorPage","userName","App","onTryAutoSignup","routes","Switch","Route","path","Redirect","exact","MainPage","react","header_Header","Boolean","location","hostname","process","withCredentials","app","es","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.279ed7a5.chunk.js","sourcesContent":["export const IS_NAME_INPUT_VALID = '[validation] is name input valid';\nexport const IS_PASSWORD_INPUT_VALID = '[validation] is password input valid';\nexport const IS_COMMENT_INPUT_VALID = '[validation] is comment input valid';\nexport const IS_CATEGORY_INPUT_VALID = '[validation] is category input valid';\nexport const IS_TITLE_POST_INPUT_VALID = '[validation] is title post input valid';\nexport const IS_BODY_POST_INPUT_VALID = '[validation] is body post input valid';\n\nexport const LOGIN_START = '[login] login start';\nexport const LOGIN_SUCCESS = '[login] login success';\nexport const LOGIN_FAIL = '[login] login fail';\nexport const LOGOUT = '[login] logout';\nexport const IS_LOGINED = '[user] is logined';\n\nexport const AUTH_START = '[auth] auth start';\nexport const AUTH_SUCCESS = '[auth] auth success';\nexport const AUTH_FAIL = '[auth] auth fail';\n\nexport const GET_USER_BY_TOKEN_START = '[user] get user by token start';\nexport const GET_USER_BY_TOKEN_SUCCESS = '[user] get user by token success';\nexport const GET_USER_BY_TOKEN_FAIL = '[user] get user by token fail';\n\nexport const GET_ALL_CATEGORIES_START = '[category] get all categories start';\nexport const GET_ALL_CATEGORIES_SUCCESS = '[category] get all categories success';\nexport const GET_ALL_CATEGORIES_FAIL = '[category] get all categories fail';\n\nexport const GET_SINGLE_CATEGORY_BY_ID_START = '[category] get single category by id start';\nexport const GET_SINGLE_CATEGORY_BY_ID_SUCCESS = '[category]  single category by id success';\nexport const GET_SINGLE_CATEGORY_BY_ID_FAIL = '[category] get single category by id fail';\n\nexport const GET_ALL_POSTS_START = '[post] get all posts start';\nexport const GET_ALL_POSTS_SUCCESS = '[post] get all posts success';\nexport const GET_ALL_POSTS_FAIL = '[post] get all posts fail';\n\nexport const CREATE_POST_START = '[post] create post start';\nexport const CREATE_POST_SUCCESS = '[post] create post success';\nexport const CREATE_POST_FAIL = '[post] create post fail';\n\nexport const DELETE_POST_START = '[post] delete post start';\nexport const DELETE_POST_SUCCESS = '[post] delete post success';\nexport const DELETE_POST_FAIL = '[post] delete post fail';\n\nexport const UPDATE_POST_START = '[post] update post start';\nexport const UPDATE_POST_SUCCESS = '[post] update post success';\nexport const UPDATE_POST_FAIL = '[post] update post fail';\n\nexport const GET_ALL_POSTS_BY_CATEGORY_START = '[post] get all posts by category start';\nexport const GET_ALL_POSTS_BY_CATEGORY_SUCCESS = '[post] get all posts by category success';\nexport const GET_ALL_POSTS_BY_CATEGORY_FAIL = '[post] get all posts by category fail';\n\nexport const GET_POST_BY_ID_START = '[post] get post by id start';\nexport const GET_POST_BY_ID_SUCCESS = '[post] get post by id success';\nexport const GET_POST_BY_ID_FAIL = '[post] get post by id fail';\n\nexport const GET_ALL_POSTS_BY_AUTHOR_ID_START = '[post] get all posts by author id start';\nexport const GET_ALL_POSTS_BY_AUTHOR_ID_SUCCESS = '[post] get all posts by author id success';\nexport const GET_ALL_POSTS_BY_AUTHOR_ID_FAIL = '[post] get all posts by author id fail';\n\nexport const GET_COMMENTS_BY_POST_ID_START = '[comment] get comments by post id start';\nexport const GET_COMMENTS_BY_POST_ID_SUCCESS = '[comment] get comments by post id success';\nexport const GET_COMMENTS_BY_POST_ID_FAIL = '[comment] get comments by post id fail';\n\nexport const CREATE_COMMENT_START = '[comment] create comment start';\nexport const CREATE_COMMENT_SUCCESS = '[comment] create comment success';\nexport const CREATE_COMMENT_FAIL = '[comment] create comment fail';\n\nexport const DELETE_COMMENT_START = '[comment] delete comment start';\nexport const DELETE_COMMENT_SUCCESS = '[comment] delete comment success';\nexport const DELETE_COMMENT_FAIL = '[comment] delete comment fail';\n","import {\n  LOGIN_START,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  AUTH_START,\n  AUTH_SUCCESS,\n  AUTH_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n  token: null,\n  loading: false,\n  loaded: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        token: action.token,\n        loading: false,\n        loaded: true,\n        error: null,\n      };\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case AUTH_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case AUTH_SUCCESS:\n      return {\n        ...state,\n        token: action.token,\n        loading: false,\n        loaded: true,\n        error: null,\n      };\n    case AUTH_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        token: null,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_USER_BY_TOKEN_START,\n  GET_USER_BY_TOKEN_SUCCESS,\n  GET_USER_BY_TOKEN_FAIL,\n  IS_LOGINED,\n  LOGOUT,\n} from '../actions/types';\n\nconst initialState = {\n  user: {\n    id: '',\n    login: '',\n    password: '',\n  },\n  isLogined: false,\n  loading: false,\n  loaded: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_USER_BY_TOKEN_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_USER_BY_TOKEN_SUCCESS:\n      return {\n        ...state,\n        user: action.user,\n        loading: false,\n        loaded: true,\n        error: null,\n      };\n    case GET_USER_BY_TOKEN_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case IS_LOGINED:\n      return {\n        ...state,\n        isLogined: action.isLogined,\n        error: null,\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        user: {\n          id: '',\n          login: '',\n          password: '',\n        },\n        isLogined: false,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  IS_NAME_INPUT_VALID,\n  IS_PASSWORD_INPUT_VALID,\n  IS_COMMENT_INPUT_VALID,\n  IS_CATEGORY_INPUT_VALID,\n  IS_TITLE_POST_INPUT_VALID,\n  IS_BODY_POST_INPUT_VALID,\n} from '../actions/types';\n\nconst initialState = {\n  isNameInputValid: false,\n  isPasswordInputValid: false,\n  isCommentInputValid: false,\n  isCategoryInputValid: false,\n  isTitleInputValid: false,\n  isBodyInputValid: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case IS_NAME_INPUT_VALID:\n      return {\n        ...state,\n        isNameInputValid: action.flag,\n        error: null,\n      };\n    case IS_PASSWORD_INPUT_VALID:\n      return {\n        ...state,\n        isPasswordInputValid: action.flag,\n        error: null,\n      };\n    case IS_COMMENT_INPUT_VALID:\n      return {\n        ...state,\n        isCommentInputValid: action.flag,\n        error: null,\n      };\n    case IS_CATEGORY_INPUT_VALID:\n      return {\n        ...state,\n        isCategoryInputValid: action.flag,\n        error: null,\n      };\n    case IS_TITLE_POST_INPUT_VALID:\n      return {\n        ...state,\n        isTitleInputValid: action.flag,\n        error: null,\n      };\n    case IS_BODY_POST_INPUT_VALID:\n      return {\n        ...state,\n        isBodyInputValid: action.flag,\n        error: null,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_ALL_CATEGORIES_START,\n  GET_ALL_CATEGORIES_SUCCESS,\n  GET_ALL_CATEGORIES_FAIL,\n  GET_SINGLE_CATEGORY_BY_ID_START,\n  GET_SINGLE_CATEGORY_BY_ID_SUCCESS,\n  GET_SINGLE_CATEGORY_BY_ID_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n  categories: [],\n  category: null,\n  loading: false,\n  loaded: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ALL_CATEGORIES_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_ALL_CATEGORIES_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        categories: action.categories,\n      };\n    case GET_ALL_CATEGORIES_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    case GET_SINGLE_CATEGORY_BY_ID_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_SINGLE_CATEGORY_BY_ID_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        category: action.category,\n      };\n    case GET_SINGLE_CATEGORY_BY_ID_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_ALL_POSTS_START,\n  GET_ALL_POSTS_SUCCESS,\n  GET_ALL_POSTS_FAIL,\n  GET_ALL_POSTS_BY_AUTHOR_ID_START,\n  GET_ALL_POSTS_BY_AUTHOR_ID_SUCCESS,\n  GET_ALL_POSTS_BY_AUTHOR_ID_FAIL,\n  GET_ALL_POSTS_BY_CATEGORY_START,\n  GET_ALL_POSTS_BY_CATEGORY_SUCCESS,\n  GET_ALL_POSTS_BY_CATEGORY_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  loading: false,\n  loaded: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ALL_POSTS_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_ALL_POSTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        posts: action.posts,\n      };\n    case GET_ALL_POSTS_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    case GET_ALL_POSTS_BY_AUTHOR_ID_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_ALL_POSTS_BY_AUTHOR_ID_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        posts: action.posts,\n      };\n    case GET_ALL_POSTS_BY_AUTHOR_ID_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    case GET_ALL_POSTS_BY_CATEGORY_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_ALL_POSTS_BY_CATEGORY_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        posts: action.posts,\n      };\n    case GET_ALL_POSTS_BY_CATEGORY_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_POST_BY_ID_START,\n  GET_POST_BY_ID_SUCCESS,\n  GET_POST_BY_ID_FAIL,\n  CREATE_POST_START,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAIL,\n  UPDATE_POST_START,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAIL,\n  DELETE_POST_START,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n  post: {\n    id: '',\n    title: '',\n    body: '',\n    author_id: '',\n    author_name: '',\n    category_id: '',\n    category_name: '',\n  },\n  loading: false,\n  loaded: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POST_BY_ID_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_POST_BY_ID_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n        post: action.post,\n      };\n    case GET_POST_BY_ID_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    case CREATE_POST_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case CREATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n      };\n    case CREATE_POST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    case UPDATE_POST_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n      };\n    case UPDATE_POST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    case DELETE_POST_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case DELETE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        loaded: true,\n      };\n    case DELETE_POST_FAIL:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_COMMENTS_BY_POST_ID_START,\n  GET_COMMENTS_BY_POST_ID_SUCCESS,\n  GET_COMMENTS_BY_POST_ID_FAIL,\n  CREATE_COMMENT_START,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAIL,\n} from '../actions/types';\n\nconst initialState = {\n  comments: [],\n  loading: false,\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_COMMENTS_BY_POST_ID_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case GET_COMMENTS_BY_POST_ID_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        comments: action.comments,\n      };\n    case GET_COMMENTS_BY_POST_ID_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case CREATE_COMMENT_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case CREATE_COMMENT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n      };\n    case CREATE_COMMENT_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth from './auth.reducer';\nimport currentUser from './user.reducer';\nimport validation from './validation.reducer';\nimport categories from './category.reducer';\nimport posts from './posts.reducer';\nimport post from './post.reducer';\nimport comments from './comment.reducer';\n\nexport default combineReducers({\n  auth,\n  currentUser,\n  validation,\n  categories,\n  allPosts: posts,\n  currentPost: post,\n  comments,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root.reducer';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst devtoolsString = '__REDUX_DEVTOOLS_EXTENSION__';\nconst enhancer = compose(\n  applyMiddleware(...middleware),\n  window[devtoolsString] && window[devtoolsString](),\n);\nconst store = createStore(rootReducer, initialState, enhancer);\n\nexport default store;\n","import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://incode-blog-internship.herokuapp.com',\n  headers: !localStorage.getItem('token')\n    ? {}\n    : { Authorization: `Bearer ${localStorage.getItem('token')}` },\n});\n\nexport default axiosInstance;\n","import axios from '../../axios';\n\nimport {\n  LOGIN_START,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  IS_LOGINED,\n  LOGOUT,\n  AUTH_START,\n  AUTH_SUCCESS,\n  AUTH_FAIL,\n} from './types';\n\nimport { getUserByToken } from './root.action';\n\nexport const isLogined = flag => ({\n  type: IS_LOGINED,\n  isLogined: flag,\n});\n\nconst loginStart = () => ({\n  type: LOGIN_START,\n});\n\nconst loginSuccess = token => ({\n  type: LOGIN_SUCCESS,\n  token,\n});\n\nconst loginFail = error => ({\n  type: LOGIN_FAIL,\n  error,\n});\n\nconst logoutHandler = () => ({\n  type: LOGOUT,\n});\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('token');\n  axios.defaults.headers.common = {};\n  dispatch(logoutHandler());\n  dispatch(isLogined(false));\n};\n\nexport const login = (name, password) => (dispatch) => {\n  dispatch(loginStart());\n  const loginData = {\n    login: name,\n    password,\n  };\n  axios\n    .post('/login', loginData)\n    .then((response) => {\n      localStorage.setItem('token', response.data.token);\n      axios.defaults.headers.common.Authorization = `Bearer ${localStorage.getItem('token')}`;\n\n      dispatch(loginSuccess(response.data.token));\n      dispatch(getUserByToken());\n    })\n    .catch((err) => {\n      dispatch(loginFail(err));\n    });\n};\n\nconst authStart = () => ({\n  type: AUTH_START,\n});\n\nconst authSuccess = token => ({\n  type: AUTH_SUCCESS,\n  token,\n});\n\nconst authFail = error => ({\n  type: AUTH_FAIL,\n  error,\n});\n\nexport const auth = (name, password) => (dispatch) => {\n  dispatch(authStart());\n  const authData = {\n    login: name,\n    password,\n  };\n  axios\n    .post('/auth', authData)\n    .then((response) => {\n      localStorage.setItem('token', response.data.token);\n      // assign token to headers;\n      axios.defaults.headers.common.Authorization = `Bearer ${localStorage.getItem('token')}`;\n\n      dispatch(authSuccess(response.data.token));\n      dispatch(getUserByToken());\n    })\n    .catch((err) => {\n      dispatch(authFail(err));\n    });\n};\n\nexport const authCheckState = () => (dispatch) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    dispatch(logout());\n  } else {\n    dispatch(getUserByToken());\n  }\n};\n","import axios from '../../axios';\n\nimport {\n  GET_USER_BY_TOKEN_START,\n  GET_USER_BY_TOKEN_SUCCESS,\n  GET_USER_BY_TOKEN_FAIL,\n} from './types';\n\nimport { isLogined } from './root.action';\n\nexport const getUserByTokenStart = () => ({\n  type: GET_USER_BY_TOKEN_START,\n});\n\nexport const getUserByTokenSuccess = user => ({\n  type: GET_USER_BY_TOKEN_SUCCESS,\n  user,\n});\n\nexport const getUserByTokenFail = error => ({\n  type: GET_USER_BY_TOKEN_FAIL,\n  error,\n});\n\nexport const getUserByToken = () => (dispatch) => {\n  dispatch(getUserByTokenStart());\n  axios\n    .get('/user')\n    .then((response) => {\n      dispatch(getUserByTokenSuccess(response.data));\n      dispatch(isLogined(true));\n    })\n    .catch((err) => {\n      dispatch(getUserByTokenFail(err));\n    });\n};\n","import {\n  IS_NAME_INPUT_VALID,\n  IS_PASSWORD_INPUT_VALID,\n  IS_COMMENT_INPUT_VALID,\n  IS_CATEGORY_INPUT_VALID,\n  IS_TITLE_POST_INPUT_VALID,\n  IS_BODY_POST_INPUT_VALID,\n} from './types';\n\nexport const setNameInputValid = flag => ({\n  type: IS_NAME_INPUT_VALID,\n  flag,\n});\n\nexport const setPasswordInputValid = flag => ({\n  type: IS_PASSWORD_INPUT_VALID,\n  flag,\n});\n\nexport const setCommentInputValid = flag => ({\n  type: IS_COMMENT_INPUT_VALID,\n  flag,\n});\n\nexport const setCategoryInputValid = flag => ({\n  type: IS_CATEGORY_INPUT_VALID,\n  flag,\n});\n\nexport const setTitleInputValid = flag => ({\n  type: IS_TITLE_POST_INPUT_VALID,\n  flag,\n});\n\nexport const setBodyInputValid = flag => ({\n  type: IS_BODY_POST_INPUT_VALID,\n  flag,\n});\n","import axios from '../../axios';\nimport {\n  GET_ALL_CATEGORIES_START,\n  GET_ALL_CATEGORIES_SUCCESS,\n  GET_ALL_CATEGORIES_FAIL,\n  GET_SINGLE_CATEGORY_BY_ID_START,\n  GET_SINGLE_CATEGORY_BY_ID_SUCCESS,\n  GET_SINGLE_CATEGORY_BY_ID_FAIL,\n} from './types';\n\nconst getAllCategoriesStart = () => ({\n  type: GET_ALL_CATEGORIES_START,\n});\n\nconst getAllCategoriesSuccess = categories => ({\n  type: GET_ALL_CATEGORIES_SUCCESS,\n  categories,\n});\n\nexport const getAllCategoriesFail = error => ({\n  type: GET_ALL_CATEGORIES_FAIL,\n  error,\n});\n\nexport const getAllCategories = () => (dispatch) => {\n  dispatch(getAllCategoriesStart());\n  axios\n    .get('/category')\n    .then((response) => {\n      dispatch(getAllCategoriesSuccess(response.data.categories));\n    })\n    .catch((err) => {\n      dispatch(getAllCategoriesFail(err));\n    });\n};\n\nconst getSingleCategoryByIdStart = () => ({\n  type: GET_SINGLE_CATEGORY_BY_ID_START,\n});\n\nconst getSingleCategoryByIdSuccess = category => ({\n  type: GET_SINGLE_CATEGORY_BY_ID_SUCCESS,\n  category,\n});\n\nexport const getSingleCategoryByIdFail = error => ({\n  type: GET_SINGLE_CATEGORY_BY_ID_FAIL,\n  error,\n});\n\nexport const getSingleCategoryById = id => (dispatch) => {\n  dispatch(getSingleCategoryByIdStart());\n  axios\n    .get(`category/${id}`)\n    .then((response) => {\n      console.log(response.data);\n      dispatch(getSingleCategoryByIdSuccess(response.data.category));\n    })\n    .catch((err) => {\n      dispatch(getSingleCategoryByIdFail(err));\n    });\n};\n","import axios from '../../axios';\nimport {\n  GET_ALL_POSTS_START,\n  GET_ALL_POSTS_SUCCESS,\n  GET_ALL_POSTS_FAIL,\n  GET_ALL_POSTS_BY_AUTHOR_ID_START,\n  GET_ALL_POSTS_BY_AUTHOR_ID_SUCCESS,\n  GET_ALL_POSTS_BY_AUTHOR_ID_FAIL,\n  GET_ALL_POSTS_BY_CATEGORY_START,\n  GET_ALL_POSTS_BY_CATEGORY_SUCCESS,\n  GET_ALL_POSTS_BY_CATEGORY_FAIL,\n} from './types';\n\nconst getAllPostsByAuthorIdStart = () => ({\n  type: GET_ALL_POSTS_BY_AUTHOR_ID_START,\n});\n\nconst getAllPostsByAuthorIdSuccess = posts => ({\n  type: GET_ALL_POSTS_BY_AUTHOR_ID_SUCCESS,\n  posts,\n});\n\nconst getAllPostsByAuthorIdFail = error => ({\n  type: GET_ALL_POSTS_BY_AUTHOR_ID_FAIL,\n  error,\n});\n\nexport const getAllPostsByAuthorId = id => (dispatch) => {\n  dispatch(getAllPostsByAuthorIdStart());\n  axios\n    .get(`/post/author/${id}`)\n    .then((response) => {\n      dispatch(getAllPostsByAuthorIdSuccess(response.data.data));\n    })\n    .catch((err) => {\n      dispatch(getAllPostsByAuthorIdFail(err));\n    });\n};\n\nconst getAllPostsByCategoryStart = () => ({\n  type: GET_ALL_POSTS_BY_CATEGORY_START,\n});\n\nconst getAllPostsByCategorySuccess = posts => ({\n  type: GET_ALL_POSTS_BY_CATEGORY_SUCCESS,\n  posts,\n});\n\nconst getAllPostsByCategoryFail = error => ({\n  type: GET_ALL_POSTS_BY_CATEGORY_FAIL,\n  error,\n});\n\nexport const getAllPostsByCategory = name => (dispatch) => {\n  dispatch(getAllPostsByCategoryStart());\n  axios\n    .get(`/post/category/${name}`)\n    .then((response) => {\n      dispatch(getAllPostsByCategorySuccess(response.data.posts));\n    })\n    .catch((err) => {\n      dispatch(getAllPostsByCategoryFail(err));\n    });\n};\n\nconst getAllPostsStart = () => ({\n  type: GET_ALL_POSTS_START,\n});\n\nconst getAllPostsSuccess = posts => ({\n  type: GET_ALL_POSTS_SUCCESS,\n  posts,\n});\n\nconst getAllPostsFail = error => ({\n  type: GET_ALL_POSTS_FAIL,\n  error,\n});\n\nexport const getAllPosts = () => (dispatch) => {\n  dispatch(getAllPostsStart());\n  axios\n    .get('/post')\n    .then((response) => {\n      dispatch(getAllPostsSuccess(response.data.data));\n    })\n    .catch((err) => {\n      dispatch(getAllPostsFail(err));\n    });\n};\n","import axios from '../../axios';\nimport {\n  CREATE_POST_START,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAIL,\n  DELETE_POST_START,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAIL,\n  UPDATE_POST_START,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAIL,\n  GET_POST_BY_ID_START,\n  GET_POST_BY_ID_SUCCESS,\n  GET_POST_BY_ID_FAIL,\n} from './types';\n\nimport { getAllPostsByAuthorId } from './root.action';\n\nconst deletePostStart = () => ({\n  type: DELETE_POST_START,\n});\n\nconst deletePostSuccess = () => ({\n  type: DELETE_POST_SUCCESS,\n});\n\nconst deletePostFail = error => ({\n  type: DELETE_POST_FAIL,\n  error,\n});\n\nexport const deletePosts = (postId, authorId) => (dispatch) => {\n  dispatch(deletePostStart());\n  axios\n    .delete(`/post/${postId}`)\n    .then((response) => {\n      dispatch(deletePostSuccess(response.data.data));\n      dispatch(getAllPostsByAuthorId(authorId));\n    })\n    .catch((err) => {\n      dispatch(deletePostFail(err));\n    });\n};\n\nconst updatePostStart = () => ({\n  type: UPDATE_POST_START,\n});\n\nconst updatePostSuccess = () => ({\n  type: UPDATE_POST_SUCCESS,\n});\n\nconst updatePostFail = error => ({\n  type: UPDATE_POST_FAIL,\n  error,\n});\n\nexport const updatePosts = (\n  postId,\n  title,\n  body,\n  authorId,\n  authorName,\n  categoryId,\n  categoryName,\n) => (dispatch) => {\n  const updateData = {\n    title,\n    body,\n    author_id: authorId,\n    author_name: authorName,\n    category_id: categoryId,\n    category_name: categoryName,\n  };\n  dispatch(updatePostStart());\n  axios\n    .put(`/post/${postId}`, updateData)\n    .then((response) => {\n      dispatch(updatePostSuccess(response.data.data));\n      dispatch(getAllPostsByAuthorId(authorId));\n    })\n    .catch((err) => {\n      dispatch(updatePostFail(err));\n    });\n};\n\nconst createPostStart = () => ({\n  type: CREATE_POST_START,\n});\n\nconst createPostSuccess = () => ({\n  type: CREATE_POST_SUCCESS,\n});\n\nconst createPostFail = error => ({\n  type: CREATE_POST_FAIL,\n  error,\n});\n\nexport const createPosts = (\n  title,\n  body,\n  authorId,\n  authorName,\n  categoryId,\n  categoryName,\n) => (dispatch) => {\n  const postData = {\n    title,\n    body,\n    author_id: authorId,\n    author_name: authorName,\n    category_id: categoryId,\n    category_name: categoryName,\n  };\n  dispatch(createPostStart());\n  axios\n    .post('/post', postData)\n    .then((response) => {\n      dispatch(createPostSuccess(response.data));\n      dispatch(getAllPostsByAuthorId(authorId));\n    })\n    .catch((err) => {\n      dispatch(createPostFail(err));\n    });\n};\n\nconst getPostByIdStart = () => ({\n  type: GET_POST_BY_ID_START,\n});\n\nconst getPostByIdSuccess = post => ({\n  type: GET_POST_BY_ID_SUCCESS,\n  post,\n});\n\nconst getPostByIdFail = error => ({\n  type: GET_POST_BY_ID_FAIL,\n  error,\n});\n\nexport const getPostById = id => (dispatch) => {\n  dispatch(getPostByIdStart());\n  axios\n    .get(`/post/${id}`)\n    .then((response) => {\n      dispatch(getPostByIdSuccess(response.data.data));\n    })\n    .catch((err) => {\n      dispatch(getPostByIdFail(err));\n    });\n};\n","import axios from '../../axios';\nimport {\n  GET_COMMENTS_BY_POST_ID_START,\n  GET_COMMENTS_BY_POST_ID_SUCCESS,\n  GET_COMMENTS_BY_POST_ID_FAIL,\n  CREATE_COMMENT_START,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAIL,\n  DELETE_COMMENT_START,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAIL,\n} from './types';\n\nconst getCommentsByPostIdStart = () => ({\n  type: GET_COMMENTS_BY_POST_ID_START,\n});\n\nconst getCommentsByPostIdSuccess = comments => ({\n  type: GET_COMMENTS_BY_POST_ID_SUCCESS,\n  comments,\n});\n\nconst getCommentsByPostIdFail = error => ({\n  type: GET_COMMENTS_BY_POST_ID_FAIL,\n  error,\n});\n\nexport const getCommentsByPostId = id => (dispatch) => {\n  dispatch(getCommentsByPostIdStart());\n  axios\n    .get(`/comment/${id}`)\n    .then((response) => {\n      dispatch(getCommentsByPostIdSuccess(response.data.comments));\n    })\n    .catch((err) => {\n      dispatch(getCommentsByPostIdFail(err));\n    });\n};\n\nconst createCommentStart = () => ({\n  type: CREATE_COMMENT_START,\n});\n\nconst createCommentSuccess = () => ({\n  type: CREATE_COMMENT_SUCCESS,\n});\n\nconst createCommentFail = error => ({\n  type: CREATE_COMMENT_FAIL,\n  error,\n});\n\nexport const createComment = (body, authorId, authorName, postId) => (dispatch) => {\n  dispatch(createCommentStart());\n  const commentData = {\n    body,\n    author_id: authorId,\n    author_name: authorName,\n    post_id: postId,\n  };\n  axios\n    .post(`/comment/${postId}`, commentData)\n    .then(() => {\n      dispatch(createCommentSuccess());\n      dispatch(getCommentsByPostId(postId));\n    })\n    .catch((err) => {\n      dispatch(createCommentFail(err));\n    });\n};\n\nconst deleteCommentStart = () => ({\n  type: DELETE_COMMENT_START,\n});\n\nconst deleteCommentSuccess = () => ({\n  type: DELETE_COMMENT_SUCCESS,\n});\n\nconst deleteCommentFail = error => ({\n  type: DELETE_COMMENT_FAIL,\n  error,\n});\n\nexport const deleteComment = (postId, commentId) => (dispatch) => {\n  dispatch(deleteCommentStart());\n  axios\n    .delete(`/comment/${commentId}`)\n    .then(() => {\n      dispatch(deleteCommentSuccess());\n      dispatch(getCommentsByPostId(postId));\n    })\n    .catch((err) => {\n      dispatch(deleteCommentFail(err));\n    });\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Typography } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport { logout } from '../../store/actions/root.action';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  link: {\n    color: 'white',\n    textDecoration: 'none',\n  },\n};\n\nclass Header extends React.Component {\n  state = {};\n\n  onHandleLogout = () => {\n    const { onLogout } = this.props;\n    onLogout();\n  };\n\n  showNavBar() {\n    const { classes, isAutenticated, userId } = this.props;\n    const renderIsAuth = () => (\n      <div>\n        <Link className={classes.link} to=\"/login\">\n          <Button color=\"inherit\">Login</Button>\n        </Link>\n        <Link className={classes.link} to=\"/register\">\n          <Button color=\"inherit\">Register</Button>\n        </Link>\n      </div>\n    );\n    const renderIsNotAuth = () => (\n      <div>\n        <Link className={classes.link} to=\"/main\">\n          <Button color=\"inherit\">Main</Button>\n        </Link>\n        <Link className={classes.link} to={`/profile/${userId}`}>\n          <Button color=\"inherit\">My Page</Button>\n        </Link>\n        <Button color=\"inherit\" onClick={this.onHandleLogout}>\n          Logout\n        </Button>\n      </div>\n    );\n\n    switch (isAutenticated) {\n      case false:\n        return renderIsAuth();\n      default:\n        return renderIsNotAuth();\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n              Incode Blog\n            </Typography>\n            {this.showNavBar()}\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  classes: PropTypes.shape({ root: PropTypes.string.isRequired }).isRequired,\n  onLogout: PropTypes.func.isRequired,\n  isAutenticated: PropTypes.bool.isRequired,\n  userId: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isAutenticated: state.currentUser.isLogined,\n  userId: state.currentUser.user.id,\n});\n\nconst mapDispatchToProps = {\n  onLogout: logout,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(Header));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst Category = ({\n  id, title, selected, onClick,\n}) => (\n  <ListItem button id={id} selected={selected} onClick={onClick}>\n    <ListItemText primary={title} />\n  </ListItem>\n);\n\nCategory.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Category;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2,\n  },\n});\n\nfunction CircularIndeterminate(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <CircularProgress className={classes.progress} color=\"primary\" size={50} />\n    </div>\n  );\n}\n\nCircularIndeterminate.propTypes = {\n  classes: PropTypes.shape({\n    progress: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default withStyles(styles)(CircularIndeterminate);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport Category from './Category';\nimport { getAllCategories, getAllPostsByCategory } from '../../store/actions/root.action';\nimport Preloader from '../../components/preloader/PreLoader';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nclass Categories extends React.Component {\n  state = {\n    selectedIndex: -1,\n  };\n\n  componentDidMount() {\n    const { onGetAllCategories } = this.props;\n    onGetAllCategories();\n  }\n\n  handleSelectedCategory = (index, title) => {\n    this.setState({ selectedIndex: index });\n    const { onGetAllPostsByCategory } = this.props;\n    onGetAllPostsByCategory(title);\n  };\n\n  handlePreloader = loading => (loading ? <Preloader /> : <div>Sometime went wrong :(</div>);\n\n  render() {\n    const {\n      loading, loaded, categories, classes,\n    } = this.props;\n    const { selectedIndex } = this.state;\n\n    return loaded ? (\n      <div className={classes.root}>\n        <List component=\"nav\">\n          {categories.map(category => (\n            <Category\n              key={category.id}\n              id={category.id}\n              title={category.title}\n              description={category.description}\n              selected={selectedIndex === category.id}\n              onClick={() => this.handleSelectedCategory(category.id, category.title)}\n            />\n          ))}\n        </List>\n      </div>\n    ) : (\n      this.handlePreloader(loading)\n    );\n  }\n}\n\nCategories.propTypes = {\n  classes: PropTypes.shape({\n    root: PropTypes.string.isRequired,\n  }).isRequired,\n  onGetAllCategories: PropTypes.func.isRequired,\n  onGetAllPostsByCategory: PropTypes.func.isRequired,\n  categories: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      alias: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  loading: state.categories.loading,\n  loaded: state.categories.loaded,\n  categories: state.categories.categories,\n});\n\nconst mapDispatchToProps = {\n  onGetAllCategories: getAllCategories,\n  onGetAllPostsByCategory: getAllPostsByCategory,\n};\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(Categories),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport FolderIcon from '@material-ui/icons/Chat';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst styles = () => ({\n  card: {\n    maxWidth: 400,\n  },\n  actions: {\n    display: 'flex',\n  },\n  avatar: {},\n});\n\nconst PostTemplate = (props) => {\n  const {\n    classes,\n    handleSelectedPost,\n    handleAuthorPosts,\n    handleDeletePost,\n    handleColor,\n    authorAvatar,\n    authorColor,\n    authorName,\n    categoryName,\n    body,\n  } = props;\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={(\n          <IconButton>\n            <Avatar\n              aria-label=\"Recipe\"\n              className={classes.avatar}\n              onClick={handleAuthorPosts}\n              style={{ backgroundColor: authorColor }}\n            >\n              {authorAvatar}\n            </Avatar>\n          </IconButton>\n)}\n        action={(\n          <IconButton>\n            <MoreVertIcon onClick={handleSelectedPost} />\n          </IconButton>\n)}\n        title={authorName}\n        subheader={categoryName}\n      />\n      <CardContent>\n        <CardContent>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar style={{ backgroundColor: handleColor() }}>\n                <FolderIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={body} />\n            <ListItemSecondaryAction>\n              <IconButton aria-label=\"Delete\">\n                <DeleteIcon onClick={() => handleDeletePost()} />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        </CardContent>\n      </CardContent>\n    </Card>\n  );\n};\n\nPostTemplate.propTypes = {\n  classes: PropTypes.shape({\n    card: PropTypes.string.isRequired,\n    actions: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n  }).isRequired,\n  authorAvatar: PropTypes.string.isRequired,\n  authorColor: PropTypes.string.isRequired,\n  authorName: PropTypes.string.isRequired,\n  categoryName: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  handleSelectedPost: PropTypes.func.isRequired,\n  handleAuthorPosts: PropTypes.func.isRequired,\n  handleColor: PropTypes.func.isRequired,\n  handleDeletePost: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(PostTemplate);\n","const stringToColour = function (str) {\n  let hash = 0;\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let colour = '#';\n  for (var i = 0; i < 3; i++) {\n    const value = (hash >> (i * 8)) & 0xff;\n    colour += (`00${value.toString(16)}`).substr(-2);\n  }\n  return colour;\n};\n\nexport default stringToColour;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PostTemplate from '../../components/postTemplate/PostTemplate';\nimport Preloader from '../../components/preloader/PreLoader';\nimport {\n  getAllPosts,\n  getPostById,\n  deletePosts,\n  updatePosts,\n} from '../../store/actions/root.action';\nimport stringToColor from '../../utils/stringToColor';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing.unit * 4,\n  },\n});\n\nclass Posts extends React.Component {\n  state = {};\n\n  componentDidMount() {\n    const { onGetAllPosts } = this.props;\n    onGetAllPosts();\n  }\n\n  handlePreloader = loading => (loading ? (\n    <Preloader />\n  ) : (\n    <List component=\"nav\">\n      <ListItem>\n        <ListItemText primary=\"No post here  :(\" />\n      </ListItem>\n    </List>\n  ));\n\n  handleColor = string => stringToColor(string);\n\n  handleAuthorAvatar = str => `${str.charAt(0)}${str.charAt(str.length - 1)}`.toUpperCase();\n\n  handleSelectedPost = (postId) => {\n    const { history } = this.props;\n    history.push(`/post/${postId}`);\n  };\n\n  handleAuthorPosts = (authorId) => {\n    const { history } = this.props;\n    history.push(`/author/${authorId}`);\n  };\n\n  handleColor = string => stringToColor(string);\n\n  handleDeletePost = (postId, authorId) => {\n    const { onDeletePosts } = this.props;\n    onDeletePosts(postId, authorId);\n  };\n\n  render() {\n    const {\n      loading, loaded, posts, classes,\n    } = this.props;\n    const { expanded } = this.state;\n\n    return loaded && posts.length !== 0 ? (\n      <div className={classes.root}>\n        <List component=\"nav\">\n          {posts.map(post => (\n            <PostTemplate\n              key={post.id}\n              id={post.id}\n              title={post.title}\n              body={post.body}\n              authorColor={this.handleColor(post.author_name)}\n              authorAvatar={this.handleAuthorAvatar(post.author_name)}\n              authorId={post.author_id}\n              authorName={post.author_name}\n              categoryId={post.category_id}\n              categoryName={post.category_name}\n              handleSelectedPost={() => this.handleSelectedPost(post.id)}\n              handleAuthorPosts={() => this.handleAuthorPosts(post.author_id)}\n              handleExpandClick={() => this.handleExpandClick()}\n              handleColor={() => this.handleColor(post.body)}\n              handleDeletePost={() => this.handleDeletePost(post.id, post.author_id)}\n              handleUpdatePost={() => this.handleUpdatePost(post.id)}\n              expanded={expanded}\n            />\n          ))}\n        </List>\n      </div>\n    ) : (\n      this.handlePreloader(loading)\n    );\n  }\n}\n\nPosts.propTypes = {\n  classes: PropTypes.shape({\n    root: PropTypes.string.isRequired,\n    nested: PropTypes.string.isRequired,\n  }).isRequired,\n  onGetAllPosts: PropTypes.func.isRequired,\n  onDeletePosts: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      author_id: PropTypes.string.isRequired,\n      author_name: PropTypes.string.isRequired,\n      category_id: PropTypes.string.isRequired,\n      category_name: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  history: PropTypes.shape({ push: PropTypes.func.isRequired }).isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  loading: state.allPosts.loading,\n  loaded: state.allPosts.loaded,\n  posts: state.allPosts.posts,\n});\n\nconst mapDispatchToProps = {\n  onGetAllPosts: getAllPosts,\n  onGetPostById: getPostById,\n  onDeletePosts: deletePosts,\n  onUpdatePosts: updatePosts,\n};\n\nexport default withStyles(styles)(\n  withRouter(\n    connect(\n      mapStateToProps,\n      mapDispatchToProps,\n    )(Posts),\n  ),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Categories from '../../containers/category/Categories';\nimport Posts from '../../containers/post/Posts';\n\nconst styles = theme => ({\n  container: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(12, 1fr)',\n    gridGap: `${theme.spacing.unit * 3}px`,\n  },\n  paper: {\n    padding: theme.spacing.unit,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    whiteSpace: 'nowrap',\n    marginBottom: theme.spacing.unit,\n  },\n});\n\nfunction CSSGrid(props) {\n  const { classes } = props;\n\n  return (\n    <div>\n      <Grid container spacing={24}>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}>\n            <Categories />\n          </Paper>\n        </Grid>\n        <Grid item xs={8}>\n          <Posts />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nCSSGrid.propTypes = {\n  classes: PropTypes.shape({\n    container: PropTypes.string.isRequired,\n    paper: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default withStyles(styles)(CSSGrid);\n","const checkValidity = (value) => {\n  let isValid = true;\n  const minLength = 3;\n  const maxLength = 16;\n\n  isValid = value.trim() !== '' && isValid;\n  isValid = value.length >= minLength && isValid;\n  isValid = value.length <= maxLength && isValid;\n\n  return isValid;\n};\n\nexport default checkValidity;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { login, setNameInputValid, setPasswordInputValid } from '../../store/actions/root.action';\nimport checkValidity from '../../utils/validation.utils';\n\nconst styles = theme => ({\n  typography: {\n    useNextVariants: true,\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    margin: 'auto',\n    width: 300,\n  },\n  textField: {\n    marginLeft: theme.spacing.auto,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nexport class LoginUserComponent extends Component {\n  state = {\n    name: '',\n    password: '',\n    touchedName: false,\n    touchedPassword: false,\n  };\n\n  handleChangeName = (e) => {\n    const { onSetNameInputValid } = this.props;\n    onSetNameInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedName: true,\n      name: e.target.value,\n    });\n  };\n\n  handleChangePassword = (e) => {\n    const { onSetPasswordInputValid } = this.props;\n    onSetPasswordInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedPassword: true,\n      password: e.target.value,\n    });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n\n    const { handleLogin } = this.props;\n\n    const { name, password } = this.state;\n    handleLogin(name, password);\n  };\n\n  render() {\n    const { nameFieldValid, passwordFieldValid } = this.props;\n    const { name, touchedName, touchedPassword } = this.state;\n    const { classes } = this.props;\n    return (\n      <form\n        className={classes.container}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={this.submitHandler}\n      >\n        <TextField\n          id=\"outlined-name-input\"\n          label=\"Name\"\n          className={classes.textField}\n          name=\"name\"\n          value={name}\n          onChange={this.handleChangeName}\n          autoComplete=\"on\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          error={!nameFieldValid && touchedName}\n        />\n\n        <TextField\n          id=\"outlined-password-input\"\n          label=\"Password\"\n          className={classes.textField}\n          type=\"password\"\n          onChange={this.handleChangePassword}\n          autoComplete=\"on\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          error={!passwordFieldValid && touchedPassword}\n        />\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n          disabled={!(nameFieldValid && passwordFieldValid)}\n        >\n          Login\n        </Button>\n      </form>\n    );\n  }\n}\n\nLoginUserComponent.propTypes = {\n  classes: PropTypes.shape({\n    container: PropTypes.string.isRequired,\n    textField: PropTypes.string.isRequired,\n    menu: PropTypes.string.isRequired,\n  }).isRequired,\n  nameFieldValid: PropTypes.bool.isRequired,\n  passwordFieldValid: PropTypes.bool.isRequired,\n  onSetNameInputValid: PropTypes.func.isRequired,\n  handleLogin: PropTypes.func.isRequired,\n  onSetPasswordInputValid: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isLogined: state.auth.isLogined,\n  nameFieldValid: state.validation.isNameInputValid,\n  passwordFieldValid: state.validation.isPasswordInputValid,\n});\n\nconst mapDispatchToProps = {\n  handleLogin: login,\n  onSetNameInputValid: setNameInputValid,\n  onSetPasswordInputValid: setPasswordInputValid,\n};\n\nconst LoginPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(LoginUserComponent));\n\nexport default LoginPage;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { auth, setNameInputValid, setPasswordInputValid } from '../../store/actions/root.action';\nimport checkValidity from '../../utils/validation.utils';\n\nconst styles = theme => ({\n  typography: {\n    useNextVariants: true,\n  },\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    margin: 'auto',\n    width: 300,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n  button: {\n    margin: theme.spacing.unit,\n  },\n  leftIcon: {\n    marginRight: theme.spacing.unit,\n  },\n  rightIcon: {\n    marginLeft: theme.spacing.unit,\n  },\n  iconSmall: {\n    fontSize: 20,\n  },\n});\n\nexport class RegisterUserComponent extends Component {\n  state = {\n    name: '',\n    password: '',\n    touchedName: false,\n    touchedPassword: false,\n  };\n\n  handleChangeName = (e) => {\n    const { onSetNameInputValid } = this.props;\n    onSetNameInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedName: true,\n      name: e.target.value,\n    });\n  };\n\n  handleChangePassword = (e) => {\n    const { onSetPasswordInputValid } = this.props;\n    onSetPasswordInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedPassword: true,\n      password: e.target.value,\n    });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    const { tryRegistration } = this.props;\n    const { name, password } = this.state;\n    tryRegistration(name, password);\n  };\n\n  render() {\n    const { classes, nameFieldValid, passwordFieldValid } = this.props;\n\n    const { name, touchedName, touchedPassword } = this.state;\n\n    return (\n      <div>\n        <form\n          className={classes.container}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={this.submitHandler}\n        >\n          <TextField\n            id=\"outlined-name\"\n            label=\"Name\"\n            className={classes.textField}\n            value={name}\n            onChange={this.handleChangeName}\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={!nameFieldValid && touchedName}\n          />\n          <TextField\n            id=\"outlined-password-input\"\n            label=\"Password\"\n            className={classes.textField}\n            type=\"password\"\n            onChange={this.handleChangePassword}\n            autoComplete=\"current-password\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={!passwordFieldValid && touchedPassword}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.button}\n            disabled={!(nameFieldValid && passwordFieldValid)}\n          >\n            auth\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nRegisterUserComponent.propTypes = {\n  classes: PropTypes.shape({\n    container: PropTypes.string.isRequired,\n    textField: PropTypes.string.isRequired,\n    menu: PropTypes.string.isRequired,\n    button: PropTypes.string.isRequired,\n    leftIcon: PropTypes.string.isRequired,\n    rightIcon: PropTypes.string.isRequired,\n    iconSmall: PropTypes.string.isRequired,\n  }).isRequired,\n  nameFieldValid: PropTypes.bool.isRequired,\n  passwordFieldValid: PropTypes.bool.isRequired,\n  onSetNameInputValid: PropTypes.func.isRequired,\n  onSetPasswordInputValid: PropTypes.func.isRequired,\n  tryRegistration: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  nameFieldValid: state.validation.isNameInputValid,\n  passwordFieldValid: state.validation.isPasswordInputValid,\n});\n\nconst mapDispatchToProps = {\n  tryRegistration: auth,\n  onSetNameInputValid: setNameInputValid,\n  onSetPasswordInputValid: setPasswordInputValid,\n};\n\nconst RegisterPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(RegisterUserComponent));\n\nexport default RegisterPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport checkValidity from '../../utils/validation.utils';\nimport { setCommentInputValid, createComment } from '../../store/actions/root.action';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass Comments extends React.Component {\n  state = {\n    comment: '',\n    touchedComment: false,\n  };\n\n  handleChangeComment = (e) => {\n    const { onSetCommentInputValid } = this.props;\n    onSetCommentInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedComment: true,\n      comment: e.target.value,\n    });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n\n    const {\n      onCreateComment, postId, authorId, authorName,\n    } = this.props;\n\n    const { comment } = this.state;\n    onCreateComment(comment, authorId, authorName, postId);\n    this.setState({ comment: '', touchedComment: false });\n  };\n\n  render() {\n    const { classes, commentFieldValid } = this.props;\n    const { comment, touchedComment } = this.state;\n\n    return (\n      <div>\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-multiline-static\"\n            label=\"Leave comment\"\n            multiline\n            rows=\"4\"\n            placeholder=\"Your comment\"\n            value={comment}\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChangeComment}\n            error={!commentFieldValid && touchedComment}\n          />\n        </form>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n          disabled={!commentFieldValid}\n          onClick={this.submitHandler}\n        >\n          Send\n        </Button>\n      </div>\n    );\n  }\n}\n\nComments.propTypes = {\n  classes: PropTypes.shape({\n    container: PropTypes.string.isRequired,\n    textField: PropTypes.string.isRequired,\n    dense: PropTypes.string.isRequired,\n    menu: PropTypes.string.isRequired,\n  }).isRequired,\n  commentFieldValid: PropTypes.bool.isRequired,\n  onSetCommentInputValid: PropTypes.func.isRequired,\n  onCreateComment: PropTypes.func.isRequired,\n  postId: PropTypes.string.isRequired,\n  authorId: PropTypes.string.isRequired,\n  authorName: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  commentFieldValid: state.validation.isCommentInputValid,\n  postId: state.currentPost.post.id,\n  authorId: state.currentUser.user.id,\n  authorName: state.currentUser.user.login,\n});\n\nconst mapDispatchToProps = {\n  onSetCommentInputValid: setCommentInputValid,\n  onCreateComment: createComment,\n};\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(Comments),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport red from '@material-ui/core/colors/red';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Comment from '../comment/Comment';\nimport Preloader from '../../components/preloader/PreLoader';\nimport { deleteComment, getPostById, getCommentsByPostId } from '../../store/actions/root.action';\n\nconst styles = theme => ({\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    margin: 'auto',\n    maxWidth: 400,\n  },\n  actions: {\n    display: 'flex',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    marginLeft: 'auto',\n    [theme.breakpoints.up('sm')]: {\n      marginRight: -8,\n    },\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n});\n\nclass CurrentPost extends React.Component {\n  state = { expanded: false };\n\n  componentDidMount() {\n    const { match, onGetPostById, onGetCommentsByPostId } = this.props;\n    const postId = match.params.id;\n    onGetPostById(postId);\n    onGetCommentsByPostId(postId);\n  }\n\n  handleExpandClick = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  handleDeleteComment = (commentId) => {\n    const { match, onDeleteComment } = this.props;\n    const postId = match.params.id;\n    onDeleteComment(postId, commentId);\n  };\n\n  handlePreloader = loading => (loading ? <Preloader /> : <div>Sometime went wrong :(</div>);\n\n  render() {\n    const {\n      loaded, loading, classes, post, comments,\n    } = this.props;\n    const { expanded } = this.state;\n\n    return loaded ? (\n      <Card className={classes.card}>\n        <CardHeader\n          avatar={(\n            <Avatar aria-label=\"Recipe\" className={classes.avatar}>\n              R\n            </Avatar>\n)}\n          action={(\n            <IconButton>\n              <MoreVertIcon />\n            </IconButton>\n)}\n          title={post.author_name}\n          subheader={post.title}\n        />\n        <CardContent>\n          <Typography component=\"p\">{post.body}</Typography>\n          <Typography component=\"p\">{post.category_name}</Typography>\n        </CardContent>\n        <CardActions className={classes.actions} disableActionSpacing>\n          <IconButton aria-label=\"Add to favorites\">\n            <FavoriteIcon />\n          </IconButton>\n          <IconButton aria-label=\"Share\">\n            <ShareIcon />\n          </IconButton>\n          <IconButton\n            className={classnames(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}\n            onClick={this.handleExpandClick}\n            aria-expanded={expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent>\n            {comments.map(comment => (\n              <div key={comment.id}>\n                <Typography paragraph>{comment.author_name}</Typography>\n                <Typography paragraph>{comment.body}</Typography>\n                <IconButton aria-label=\"Delete\">\n                  <DeleteIcon onClick={() => this.handleDeleteComment(comment.id)} />\n                </IconButton>\n              </div>\n            ))}\n          </CardContent>\n        </Collapse>\n        <Comment />\n      </Card>\n    ) : this.handlePreloader(loading);\n  }\n}\n\nCurrentPost.propTypes = {\n  // match: PropTypes.shape({\n  //   isExact: PropTypes.bool.isRequired,\n  //   params: {\n  //     id: PropTypes.string.isRequired,\n  //     _proto_: PropTypes.shape({ valueOf: PropTypes.func.isRequired }),\n  //   },\n  //   path: PropTypes.string.isRequired,\n  //   url: PropTypes.string.isRequired,\n  // }).isRequired,\n  classes: PropTypes.shape({\n    card: PropTypes.string.isRequired,\n    actions: PropTypes.string.isRequired,\n    expand: PropTypes.string.isRequired,\n    expandOpen: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n  }).isRequired,\n  post: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    author_id: PropTypes.string.isRequired,\n    author_name: PropTypes.string.isRequired,\n    category_id: PropTypes.string.isRequired,\n    category_name: PropTypes.string.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      author_id: PropTypes.string.isRequired,\n      author_name: PropTypes.string.isRequired,\n      post_id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDeleteComment: PropTypes.func.isRequired,\n  onGetPostById: PropTypes.func.isRequired,\n  onGetCommentsByPostId: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  loading: state.currentPost.loading,\n  loaded: state.currentPost.loaded,\n  post: state.currentPost.post,\n  comments: state.comments.comments,\n});\nconst mapDispatchToProps = {\n  onGetPostById: getPostById,\n  onDeleteComment: deleteComment,\n  onGetCommentsByPostId: getCommentsByPostId,\n};\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(CurrentPost),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {\n  getAllCategories,\n  getSingleCategoryById,\n  setCategoryInputValid,\n  setTitleInputValid,\n  setBodyInputValid,\n  createPosts,\n} from '../../store/actions/root.action';\nimport checkValidity from '../../utils/validation.utils';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass ProfileForm extends React.Component {\n  state = {\n    category: '',\n    categoryId: undefined,\n    title: '',\n    body: '',\n    touchedCategory: false,\n    touchedTitle: false,\n    touchedBody: false,\n  };\n\n  componentDidMount() {\n    const { onGetAllCategories } = this.props;\n    onGetAllCategories();\n  }\n\n  handleChangeCategory = (e) => {\n    const { onSetCategoryInputValid } = this.props;\n    onSetCategoryInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedCategory: true,\n      category: e.target.value,\n    });\n  };\n\n  handleChangeTitle = (e) => {\n    const { onSetTitleInputValid } = this.props;\n    onSetTitleInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedTitle: true,\n      title: e.target.value,\n    });\n  };\n\n  handleChangeBody = (e) => {\n    const { onSetBodyInputValid } = this.props;\n    onSetBodyInputValid(checkValidity(e.target.value));\n    this.setState({\n      touchedBody: true,\n      body: e.target.value,\n    });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n\n    const { onCreatePosts, user } = this.props;\n    const {\n      title, body, categoryId, category,\n    } = this.state;\n    onCreatePosts(title, body, user.id, user.login, categoryId, category);\n    this.setState({\n      category: '',\n      categoryId: undefined,\n      title: '',\n      body: '',\n      touchedCategory: false,\n      touchedTitle: false,\n      touchedBody: false,\n    });\n  };\n\n  render() {\n    const {\n      classes, categories, categoryInputValid, titleInputValid, bodyInputValid,\n    } = this.props;\n    const {\n      category, title, body, touchedCategory, touchedTitle, touchedBody,\n    } = this.state;\n\n    return (\n      <div>\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          <TextField\n            id=\"title\"\n            label=\"Title\"\n            value={title}\n            placeholder=\"Title\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"filled\"\n            onChange={this.handleChangeTitle}\n            error={!titleInputValid && touchedTitle}\n          />\n\n          {/* <TextField\n            id=\"addNewCategory\"\n            label=\"Add New Category\"\n            placeholder=\"Add New Category\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"filled\"\n            onChange={this.handleChangeCategory}\n            error={!categoryInputValid && touchedCategory}\n          /> */}\n\n          <TextField\n            id=\"filled-select-category\"\n            select\n            label=\"Select category\"\n            className={classes.textField}\n            value={category}\n            onChange={this.handleChangeCategory}\n            error={!categoryInputValid && touchedCategory}\n            SelectProps={{\n              MenuProps: {\n                className: classes.menu,\n              },\n            }}\n            helperText=\"Please select category\"\n            margin=\"normal\"\n            variant=\"filled\"\n          >\n            {categories.map(item => (\n              <MenuItem key={item.id} value={item.title}>\n                {item.title}\n              </MenuItem>\n            ))}\n          </TextField>\n\n          <TextField\n            id=\"body\"\n            label=\"Write Post\"\n            multiline\n            rows=\"4\"\n            value={body}\n            placeholder=\"Write Post\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"filled\"\n            onChange={this.handleChangeBody}\n            error={!bodyInputValid && touchedBody}\n          />\n        </form>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n          onClick={this.submitHandler}\n          disabled={!(categoryInputValid && titleInputValid && bodyInputValid)}\n        >\n          Create Post\n        </Button>\n      </div>\n    );\n  }\n}\n\nProfileForm.propTypes = {\n  classes: PropTypes.shape({\n    container: PropTypes.string.isRequired,\n    textField: PropTypes.string.isRequired,\n    dense: PropTypes.string.isRequired,\n    menu: PropTypes.string.isRequired,\n  }).isRequired,\n  categories: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      alias: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onGetAllCategories: PropTypes.func.isRequired,\n  // onGetSingleCategoryById: PropTypes.func.isRequired,\n  onSetCategoryInputValid: PropTypes.func.isRequired,\n  onSetTitleInputValid: PropTypes.func.isRequired,\n  onSetBodyInputValid: PropTypes.func.isRequired,\n  categoryInputValid: PropTypes.bool.isRequired,\n  titleInputValid: PropTypes.bool.isRequired,\n  bodyInputValid: PropTypes.bool.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    login: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }).isRequired,\n  onCreatePosts: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  categories: state.categories.categories,\n  categoryInputValid: state.validation.isCategoryInputValid,\n  titleInputValid: state.validation.isTitleInputValid,\n  bodyInputValid: state.validation.isBodyInputValid,\n  categoryId: state.categories.categories,\n  user: state.currentUser.user,\n});\n\nconst mapDispatchToProps = {\n  onGetAllCategories: getAllCategories,\n  onGetSingleCategoryById: getSingleCategoryById,\n  onSetCategoryInputValid: setCategoryInputValid,\n  onSetTitleInputValid: setTitleInputValid,\n  onSetBodyInputValid: setBodyInputValid,\n  onCreatePosts: createPosts,\n};\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(ProfileForm),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FolderIcon from '@material-ui/icons/Chat';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\nimport { getAllPostsByAuthorId, deletePosts } from '../../store/actions/root.action';\nimport ProfileForm from './ProfileForm';\nimport Preloader from '../../components/preloader/PreLoader';\nimport stringToColor from '../../utils/stringToColor';\n\nconst styles = theme => ({\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    margin: 'auto',\n    maxWidth: 400,\n  },\n  actions: {\n    display: 'flex',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    marginLeft: 'auto',\n    [theme.breakpoints.up('sm')]: {\n      marginRight: -8,\n    },\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {},\n});\n\nclass ProfilePage extends React.Component {\n  state = { expanded: false };\n\n  componentDidMount() {\n    const { match, onGetAllPostsByAuthorId } = this.props;\n    const userId = match.params.id;\n    onGetAllPostsByAuthorId(userId);\n  }\n\n  handleExpandClick = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  handleColor = string => stringToColor(string);\n\n  handleAuthorAvatar = str => `${str.charAt(0)}${str.charAt(str.length - 1)}`.toUpperCase();\n\n  handlerDeletePost = (postId) => {\n    console.log(postId);\n    const { onDeletePosts } = this.props;\n    onDeletePosts(postId);\n  };\n\n  handlePreloader = loading => (loading ? <Preloader /> : <div>Sometime went wrong :(</div>);\n\n  render() {\n    const {\n      classes, user, userPosts, loaded, loading,\n    } = this.props;\n    const { expanded } = this.state;\n\n    return loaded ? (\n      <Card className={classes.card}>\n        <CardHeader\n          avatar={(\n            <Avatar aria-label=\"Recipe\" style={{ backgroundColor: this.handleColor(user.login) }}>\n              {this.handleAuthorAvatar(user.login)}\n            </Avatar>\n)}\n          title={user.login}\n        />\n        <CardContent />\n        <ProfileForm />\n        <CardActions className={classes.actions} disableActionSpacing>\n          <IconButton\n            className={classnames(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}\n            onClick={this.handleExpandClick}\n            aria-expanded={expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent>\n            {userPosts.length !== 0 ? (\n              userPosts.map(post => (\n                <div key={post.id}>\n                  <Paper className={classes.paper}>\n                    <ListItem>\n                      <ListItemAvatar>\n                        <Avatar style={{ backgroundColor: this.handleColor(post.title) }}>\n                          <FolderIcon />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText primary={post.title} />\n                      <ListItemSecondaryAction>\n                        <IconButton\n                          aria-label=\"Delete\"\n                          onClick={() => this.handlerDeletePost(post.id)}\n                        >\n                          <DeleteIcon />\n                        </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary={post.body} />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary={post.category_name} />\n                    </ListItem>\n                  </Paper>\n                </div>\n              ))\n            ) : (\n              <Typography>No any post here :(</Typography>\n            )}\n          </CardContent>\n        </Collapse>\n      </Card>\n    ) : (\n      this.handlePreloader(loading)\n    );\n  }\n}\n\nProfilePage.propTypes = {\n  classes: PropTypes.shape({\n    card: PropTypes.string.isRequired,\n    actions: PropTypes.string.isRequired,\n    expand: PropTypes.string.isRequired,\n    expandOpen: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n  }).isRequired,\n  userPosts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      author_id: PropTypes.string.isRequired,\n      author_name: PropTypes.string.isRequired,\n      category_id: PropTypes.string.isRequired,\n      category_name: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    login: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }).isRequired,\n  onGetAllPostsByAuthorId: PropTypes.func.isRequired,\n  onDeletePosts: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  user: state.currentUser.user,\n  userPosts: state.allPosts.posts,\n  loaded: state.allPosts.loaded,\n  loading: state.allPosts.loading,\n});\n\nconst mapDispatchToProps = {\n  onGetAllPostsByAuthorId: getAllPostsByAuthorId,\n  onDeletePosts: deletePosts,\n};\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(ProfilePage),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FolderIcon from '@material-ui/icons/Chat';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Paper from '@material-ui/core/Paper';\nimport { getAllPostsByAuthorId } from '../../store/actions/root.action';\nimport stringToColor from '../../utils/stringToColor';\n\nconst styles = theme => ({\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap',\n    margin: 'auto',\n    maxWidth: 400,\n  },\n  paper: {\n    padding: theme.spacing.unit,\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    whiteSpace: 'nowrap',\n    marginBottom: theme.spacing.unit,\n  },\n  actions: {\n    display: 'flex',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n    marginLeft: 'auto',\n    [theme.breakpoints.up('sm')]: {\n      marginRight: -8,\n    },\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {},\n});\n\nclass AuthorPage extends React.Component {\n  state = { expanded: false };\n\n  componentDidMount() {\n    const { match } = this.props;\n    const userId = match.params.id;\n    const { onGetAllPostsByAuthorId } = this.props;\n    onGetAllPostsByAuthorId(userId);\n  }\n\n  handleExpandClick = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  handleColor = string => stringToColor(string);\n\n  handleAuthorAvatar = str => `${str.charAt(0)}${str.charAt(str.length - 1)}`.toUpperCase();\n\n  render() {\n    const { classes, userName, userPosts } = this.props;\n    const { expanded } = this.state;\n\n    return (\n      <Card className={classes.card}>\n        <CardHeader\n          avatar={(\n            <Avatar aria-label=\"Recipe\" style={{ backgroundColor: this.handleColor(userName) }}>\n              {this.handleAuthorAvatar(userName)}\n            </Avatar>\n)}\n          title={userName}\n        />\n        <CardContent />\n        <CardActions className={classes.actions} disableActionSpacing>\n          <IconButton\n            className={classnames(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}\n            onClick={this.handleExpandClick}\n            aria-expanded={expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent>\n            {userPosts.length !== 0 ? (\n              userPosts.map(post => (\n                <div key={post.id}>\n                  <Paper className={classes.paper}>\n                    <ListItem>\n                      <ListItemAvatar>\n                        <Avatar style={{ backgroundColor: this.handleColor(post.body) }}>\n                          <FolderIcon />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText primary={post.title} />\n                      <ListItemSecondaryAction>\n                        <IconButton aria-label=\"Delete\">\n                          <DeleteIcon />\n                        </IconButton>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary={post.body} />\n                    </ListItem>\n                    <ListItem>\n                      <ListItemText primary={post.category_name} />\n                    </ListItem>\n                  </Paper>\n                </div>\n              ))\n            ) : (\n              <Typography>No any post here :(</Typography>\n            )}\n          </CardContent>\n        </Collapse>\n      </Card>\n    );\n  }\n}\n\nAuthorPage.propTypes = {\n  match: PropTypes.shape.isRequired,\n  classes: PropTypes.shape({\n    card: PropTypes.string.isRequired,\n    actions: PropTypes.string.isRequired,\n    expand: PropTypes.string.isRequired,\n    expandOpen: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n  }).isRequired,\n  userPosts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      author_id: PropTypes.string.isRequired,\n      author_name: PropTypes.string.isRequired,\n      category_id: PropTypes.string.isRequired,\n      category_name: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  userName: PropTypes.string.isRequired,\n  onGetAllPostsByAuthorId: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  userName: state.posts.posts[0].author_name,\n  userPosts: state.posts.posts,\n});\n\nconst mapDispatchToProps = {\n  onGetAllPostsByAuthorId: getAllPostsByAuthorId,\n};\n\nexport default withStyles(styles)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(AuthorPage),\n);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Route, Switch, Redirect, withRouter,\n} from 'react-router-dom';\nimport './App.css';\nimport Header from './containers/header/Header';\nimport MainPage from './components/main/MainPage';\nimport LoginPage from './containers/auth/LoginPage';\nimport RegisterPage from './containers/auth/RegisterPage';\nimport CurrentPost from './containers/post/CurrentPost';\nimport ProfilePage from './containers/profile/ProfilePage';\nimport AuthorPage from './containers/author/AuthorPage';\nimport { authCheckState } from './store/actions/root.action';\n\nclass App extends Component {\n  componentDidMount() {\n    const { onTryAutoSignup } = this.props;\n    onTryAutoSignup();\n  }\n\n  render() {\n    const { isAutenticated } = this.props;\n    let routes = (\n      <Switch>\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/register\" component={RegisterPage} />\n        <Redirect to=\"/login\" />\n      </Switch>\n    );\n    if (isAutenticated) {\n      routes = (\n        <Switch>\n          <Route exact path=\"/main\" component={MainPage} />\n          <Route exact path=\"/post/:id\" component={CurrentPost} />\n          <Route exact path=\"/profile/:id\" component={ProfilePage} />\n          <Route exact path=\"/author/:id\" component={AuthorPage} />\n          <Redirect to=\"/main\" />\n        </Switch>\n      );\n    }\n    return (\n      <Fragment>\n        <Header />\n        {routes}\n      </Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  onTryAutoSignup: PropTypes.func.isRequired,\n  isAutenticated: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  isAutenticated: state.currentUser.isLogined,\n});\n\nconst mapDispatchToProps = {\n  onTryAutoSignup: authCheckState,\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(App),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from './axios';\nimport BASE_URL from './config';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.withCredentials = true;\n\nconst app = (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const BASE_URL = process.env.PUBLIC_URL;\nexport default BASE_URL;\n"],"sourceRoot":""}